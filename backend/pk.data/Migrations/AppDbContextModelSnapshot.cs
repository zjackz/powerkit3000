// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pk.data;

#nullable disable

namespace pk.data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("pk.data.Models.AmazonCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AmazonCategoryId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AmazonCategoryId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("AmazonCategories");
                });

            modelBuilder.Entity("pk.data.Models.AmazonProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Brand")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ListingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "Title");

                    b.ToTable("AmazonProducts");
                });

            modelBuilder.Entity("pk.data.Models.AmazonProductDataPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CapturedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int?>("ReviewsCount")
                        .HasColumnType("integer");

                    b.Property<long>("SnapshotId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SnapshotId");

                    b.HasIndex("ProductId", "CapturedAt");

                    b.ToTable("AmazonProductDataPoints");
                });

            modelBuilder.Entity("pk.data.Models.AmazonProductOperationalMetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("BuyBoxPrice")
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime>("CapturedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsStockout")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("InventoryDays")
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("InventoryQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LatestNegativeReviewAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatestNegativeReviewExcerpt")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("LatestNegativeReviewUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("LatestPriceUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NegativeReviewCount")
                        .HasColumnType("integer");

                    b.Property<long>("OperationalSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("UnitsSold7d")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OperationalSnapshotId");

                    b.HasIndex("ProductId", "CapturedAt");

                    b.ToTable("AmazonProductOperationalMetrics");
                });

            modelBuilder.Entity("pk.data.Models.TemplateConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("AccessToken")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ApiBaseUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ThemeColor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TemplateConfigurations");
                });

            modelBuilder.Entity("pk.data.Models.TemplateDictionaryEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category", "Key")
                        .IsUnique();

                    b.ToTable("TemplateDictionaryEntries");
                });

            modelBuilder.Entity("pk.data.Models.AmazonSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BestsellerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CapturedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "BestsellerType", "CapturedAt");

                    b.ToTable("AmazonSnapshots");
                });

            modelBuilder.Entity("pk.data.Models.AmazonOperationalSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CapturedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long?>("SourceSnapshotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CapturedAt");

                    b.ToTable("AmazonOperationalSnapshots");
                });

            modelBuilder.Entity("pk.data.Models.AmazonTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoriesJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FiltersJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("KeywordsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("LeaderboardsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("LimitsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("LlmSummary")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PriceRangeJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ProxyPolicy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ScheduleJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AmazonTasks");
                });

            modelBuilder.Entity("pk.data.Models.AmazonTrend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SnapshotId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrendType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SnapshotId", "TrendType");

                    b.ToTable("AmazonTrends");
                });

            modelBuilder.Entity("pk.data.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentName")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("pk.data.Models.Creator", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("pk.data.Models.KickstarterProject", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("BackersCount")
                        .HasColumnType("integer");

                    b.Property<string>("Blurb")
                        .HasColumnType("text");

                    b.Property<string>("BlurbCn")
                        .HasColumnType("text");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ConvertedPledgedAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("CountryDisplayableName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("text");

                    b.Property<bool?>("CurrencyTrailingCode")
                        .HasColumnType("boolean");

                    b.Property<string>("CurrentCurrency")
                        .HasColumnType("text");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("DisableCommunication")
                        .HasColumnType("boolean");

                    b.Property<decimal>("FxRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Goal")
                        .HasColumnType("numeric");

                    b.Property<bool?>("IsDisliked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsInPostCampaignPledgingPhase")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLaunched")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLiked")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsStarrable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LaunchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameCn")
                        .HasColumnType("text");

                    b.Property<decimal>("PercentFunded")
                        .HasColumnType("numeric");

                    b.Property<string>("Photo")
                        .HasColumnType("jsonb");

                    b.Property<decimal>("Pledged")
                        .HasColumnType("numeric");

                    b.Property<bool?>("PrelaunchActivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("Spotlight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("StaffPick")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<DateTime>("StateChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StaticUsdRate")
                        .HasColumnType("numeric");

                    b.Property<string>("Urls")
                        .HasColumnType("jsonb");

                    b.Property<decimal>("UsdExchangeRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UsdPledged")
                        .HasColumnType("numeric");

                    b.Property<string>("UsdType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LocationId");

                    b.ToTable("KickstarterProjects");
                });

            modelBuilder.Entity("pk.data.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("DisplayableName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("pk.data.Models.ProjectFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ClientId", "ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectFavorites");
                });

            modelBuilder.Entity("pk.data.Models.AmazonCategory", b =>
                {
                    b.HasOne("pk.data.Models.AmazonCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("pk.data.Models.AmazonProduct", b =>
                {
                    b.HasOne("pk.data.Models.AmazonCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("pk.data.Models.AmazonProductDataPoint", b =>
                {
                    b.HasOne("pk.data.Models.AmazonProduct", "Product")
                        .WithMany("DataPoints")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pk.data.Models.AmazonSnapshot", "Snapshot")
                        .WithMany("DataPoints")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("pk.data.Models.AmazonProductOperationalMetric", b =>
                {
                    b.HasOne("pk.data.Models.AmazonOperationalSnapshot", "OperationalSnapshot")
                        .WithMany("ProductMetrics")
                        .HasForeignKey("OperationalSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pk.data.Models.AmazonProduct", "Product")
                        .WithMany("OperationalMetrics")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationalSnapshot");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("pk.data.Models.AmazonSnapshot", b =>
                {
                    b.HasOne("pk.data.Models.AmazonCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("pk.data.Models.AmazonOperationalSnapshot", b =>
                {
                    b.Navigation("ProductMetrics");
                });

            modelBuilder.Entity("pk.data.Models.AmazonTrend", b =>
                {
                    b.HasOne("pk.data.Models.AmazonProduct", "Product")
                        .WithMany("Trends")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pk.data.Models.AmazonSnapshot", "Snapshot")
                        .WithMany("Trends")
                        .HasForeignKey("SnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Snapshot");
                });

            modelBuilder.Entity("pk.data.Models.KickstarterProject", b =>
                {
                    b.HasOne("pk.data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pk.data.Models.Creator", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pk.data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("pk.data.Models.ProjectFavorite", b =>
                {
                    b.HasOne("pk.data.Models.KickstarterProject", "Project")
                        .WithMany("Favorites")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("pk.data.Models.AmazonCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("pk.data.Models.AmazonProduct", b =>
                {
                    b.Navigation("DataPoints");

                    b.Navigation("OperationalMetrics");

                    b.Navigation("Trends");
                });

            modelBuilder.Entity("pk.data.Models.AmazonSnapshot", b =>
                {
                    b.Navigation("DataPoints");

                    b.Navigation("Trends");
                });

            modelBuilder.Entity("pk.data.Models.KickstarterProject", b =>
                {
                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
